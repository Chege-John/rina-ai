// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User  {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fullname  String
  clerkId   String    @unique
  type      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  domains Domain[]
  subscription  Billings?

  stripeId  String?
}

model Domain {
  id    String  @id @default(dbgenerated("gen_random_uuid()"))  @db.Uuid
  name  String
  icon  String

  products  Product[]
  bookings        Booking[]

  chatbot         Chatbot?
  helpdesk        Helpdesk[]
  filterQuestions FilterQuestions[]

  customer  Customer[]
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?   @db.Uuid
}

model Chatbot {
  id             String  @id @default(dbgenerated("gen_random_uuid()"))  @db.Uuid
  welcomeMessage String?
  icon            String?
  Domain          Domain? @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId        String? @unique @db.Uuid
}

model Billings {
  id             String  @id @default(dbgenerated("gen_random_uuid()"))  @db.Uuid
  plan           Plans   @default(STANDARD)
  credits        Int    @default(10)
  User           User?   @relation(fields:  [userId], references: [id], onDelete: Cascade) 
  userId         String? @unique @db.Uuid
}

model Helpdesk {
  id             String  @id @default(dbgenerated("gen_random_uuid()"))  @db.Uuid
  question       String
  answer         String

  Domain         Domain?  @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId       String?  @db.Uuid
}

model FilterQuestions {
id             String  @id @default(dbgenerated("gen_random_uuid()"))  @db.Uuid
question       String
answered       String?  

Domain         Domain?  @relation(fields: [domainId], references: [id], onDelete: Cascade)
domainId       String?  @db.Uuid
}

model CustomerResponses {
id             String  @id @default(dbgenerated("gen_random_uuid()"))  @db.Uuid
question       String
answered       String?  
customer       Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
customerId     String  @db.Uuid
}


model Customer {
  id             String  @id @default(dbgenerated("gen_random_uuid()"))  @db.Uuid
  email          String?

  questions      CustomerResponses[]
  bookings       Booking[]  
  chatRoom       ChatRoom[]

  Domain         Domain?  @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId       String?  @db.Uuid
}

model ChatRoom  {
id             String  @id @default(dbgenerated("gen_random_uuid()"))  @db.Uuid
live           Boolean  @default(false)
mailed         Boolean  @default(false)
createdAt      DateTime @default(now())
updatedAt      DateTime @updatedAt
customer       Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
customerId     String  @db.Uuid

message        ChatMessage[]
}

model ChatMessage {
id             String  @id @default(dbgenerated("gen_random_uuid()"))  @db.Uuid
message        String
role           Role?
createdAt      DateTime @default(now())
updatedAt      DateTime @updatedAt
seen           Boolean   @default(false)
ChatRoom       ChatRoom? @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
chatRoomId     String?  @db.Uuid
}

model Product {
  id        String  @id @default(dbgenerated("gen_random_uuid()"))  @db.Uuid
  name      String
  price     Float   
  image     String?  
  Domain    Domain?  @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId  String?  @db.Uuid
}

model Booking {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String?
  date      DateTime
  time      String?
  slot      String   // Add this field
  email     String   // Add this field
  status    BookingStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String   @db.Uuid
  
  domain     Domain   @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId   String   @db.Uuid
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum  Plans {
  STANDARD
  PRO
  ULTIMATE
}

enum  Role  {
  OWNER
  CUSTOMER
}

